name: Build Blockbook

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  # Trigger on push to Git tags starting with 'v', like 'v1.0'
  push:
    tags:
      - "v*"
  workflow_dispatch: # Allow manual triggering of the workflow

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ubuntu:
    # The type of runner that the job will run on
    name: Build Blockbook (Ubuntu)
    runs-on: ubuntu-latest

    # Set environment variables for the entire job
    env:
      # ZeroMQ 4.3.5
      ZEROMQ_COMMIT: 622fc6dde99ee172ebaa9c8628d85a7a1995a21d
      # RocksDB 10.2.1
      ROCKSDB_COMMIT: 4b2122578e475cb88aef4dcf152cccd5dbf51060
      BLOCKBOOK_VERSION: 0.5.0
      BLOCKBOOK_COMMIT: e98b435128875a76bdb4ff5708a75c1b186f66f2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 0: Create /build directory to resolve permission issue
      - name: Setup /build dir
        run: |
          sudo mkdir -p /build
          sudo chown -R $USER:$USER /build

      # Step 1: Checkout repository from Trezor's GitHub repository
      - name: Checkout Blockbook repository
        run: |
          git clone https://github.com/trezor/blockbook.git /build/blockbook
          cd /build/blockbook
          git checkout $BLOCKBOOK_COMMIT

      # Step 2: Install build dependencies
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            software-properties-common \
            ca-certificates \
            build-essential \
            libtool \
            git \
            pkg-config \
            autoconf \
            curl \
            librocksdb-dev \
            libzmq3-dev \
            libgflags-dev \
            libsnappy-dev \
            zlib1g-dev \
            libbz2-dev \
            libzstd-dev \
            liblz4-dev

      # Step 3: Install Go
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache-dependency-path: /build/blockbook/go.sum

      # Step 4: Cache /libzmq directory
      - name: Cache ZeroMQ build
        uses: actions/cache@v4
        id: zeromq-cache
        with:
          path: /build/libzmq
          key: zeromq-${{ env.ZEROMQ_COMMIT }}
          restore-keys: |
            zeromq-

      # Step 5: Build ZeroMQ if not cached
      - name: Build ZeroMQ
        if: steps.zeromq-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /build/libzmq
          cd /build/libzmq
          git init
          git remote add origin https://github.com/zeromq/libzmq.git
          git fetch --depth 1 origin $ZEROMQ_COMMIT
          git checkout $ZEROMQ_COMMIT
          ./autogen.sh
          ./configure --enable-static --disable-shared --without-documentation
          make -j$(nproc)

      # Step 6: Cache /rocksdb directory
      - name: Cache RocksDB build
        uses: actions/cache@v4
        id: rocksdb-cache
        with:
          path: /build/rocksdb
          key: rocksdb-${{ env.ROCKSDB_COMMIT }}
          restore-keys: |
            rocksdb-

      # Step 7: Build RocksDB if not cached
      - name: Build RocksDB
        if: steps.rocksdb-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /build/rocksdb
          cd /build/rocksdb
          git init
          git remote add origin https://github.com/facebook/rocksdb.git
          git fetch --depth 1 origin $ROCKSDB_COMMIT
          git checkout $ROCKSDB_COMMIT
          PORTABLE=1 CFLAGS=-fPIC CXXFLAGS=-fPIC make -j $(nproc --all) static_lib

      # Step 8: Update Go dependencies
      - name: Update Go dependencies
        run: |
          cd /build/blockbook
          go get -u -v github.com/linxGnu/grocksdb@latest
          go get -u -v github.com/pebbe/zmq4@v1.2.11
          go mod tidy

      # Step 9: Build Blockbook
      - name: Build Blockbook
        run: |
          cd /build/blockbook
          LDFLAGS="-X github.com/trezor/blockbook/common.version=${BLOCKBOOK_VERSION} \
                   -X github.com/trezor/blockbook/common.gitcommit=$(git describe --always) \
                   -X github.com/trezor/blockbook/common.buildtime=$(date --iso-8601=seconds)"
          CGO_CFLAGS="-I/build/libzmq/include -I/build/rocksdb/include -I/usr/include" \
          CGO_LDFLAGS="-L/build/libzmq/src/.libs -L/build/rocksdb -L/usr/lib -L/usr/lib/x86_64-linux-gnu -Wl,--no-as-needed -lzmq -lpthread -lrocksdb -lstdc++ -lm -lc -lgcc -lz -ldl -lbz2 -lsnappy -llz4 -lzstd" \
          go build -v -ldflags="-s -w ${LDFLAGS} -extldflags '-static'" -o blockbook blockbook.go
          go build -v -o blockbookgen build/templates/generate.go
          tar -czvf blockbook-linux.tar.gz blockbook blockbookgen static configs build

      # Step 10: Upload executable as an artifact (optional for debugging)
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: blockbook-linux.tar.gz
          path: /build/blockbook/blockbook-linux.tar.gz

  build-windows:
    # The type of runner that the job will run on
    name: Build Blockbook (Windows)
    runs-on: windows-latest

    # Set environment variables for the entire job
    env: 
      BLOCKBOOK_VERSION: 0.5.0
      BLOCKBOOK_COMMIT: e98b435128875a76bdb4ff5708a75c1b186f66f2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checkout repository from Trezor's GitHub repository
      - name: Checkout Blockbook repository
        run: |
          git clone https://github.com/trezor/blockbook.git
          cd blockbook
          git checkout $env:BLOCKBOOK_COMMIT

      # Step 2: Set up vcpkg directory and cache dependencies
      - name: Set up vcpkg cache
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          path: C:\vcpkg\installed # Cache the installed packages directory
          key: vcpkg-cache-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-lock.json') }}
          restore-keys: |
            vcpkg-cache-${{ runner.os }}-

      # Step 3: Install vcpkg for RocksDB and other dependencies
      - name: Install vcpkg
        run: |
          if (!(Test-Path -Path "C:\vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
            cd C:\vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg integrate install
          }

      # Step 4: Install RocksDB and dependencies via vcpkg
      - name: Install dependencies
        env:
          VCPKG_DEFAULT_TRIPLET: "x64-mingw-dynamic" # Set default triplet
        run: |
          C:\vcpkg\vcpkg install zeromq zlib lz4 zstd snappy rocksdb
          C:\vcpkg\vcpkg list

      # Step 5: Install Go
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache-dependency-path: ./blockbook/go.sum

      # Step 6: Update go.mod to Use Latest grocksdb Release
      - name: Update grocksdb / zmq4 to Latest Tagged Release
        run: |
          cd blockbook
          go get -u -v github.com/linxGnu/grocksdb@latest
          go get -u -v github.com/pebbe/zmq4@v1.2.11
          go mod tidy # Clean up the go.mod file after updating dependencies

      # Step 7: Build Blockbook executable using MinGW and vcpkg dependencies
      - name: Build Blockbook
        env:
          CGO_ENABLED: 1
          CC: "x86_64-w64-mingw32-gcc" # Specify GCC from Pre-installed MinGW
          CXX: "x86_64-w64-mingw32-g++" # Specify C++ compiler
          CGO_CFLAGS: "-IC:\\vcpkg\\installed\\x64-mingw-dynamic\\include"
          CGO_LDFLAGS: "-LC:\\vcpkg\\installed\\x64-mingw-dynamic\\lib -l:liblz4.dll.a -l:librocksdb-shared.dll.a -l:libsnappy.dll.a -l:libzlib.dll.a -l:libzmq.dll.a -l:libzstd.dll.a -pthread -lstdc++ -lm -lshlwapi -lrpcrt4"
        run: |
          cd blockbook

          $GIT_COMMIT = & git describe --always
          $BUILD_TIME = Get-Date -Format "yyyy-MM-ddTHH:mm:ssK"
          $LDFLAGS = "-X github.com/trezor/blockbook/common.version=$env:BLOCKBOOK_VERSION -X github.com/trezor/blockbook/common.gitcommit=$GIT_COMMIT -X github.com/trezor/blockbook/common.buildtime=$BUILD_TIME"

          go build -v -tags grocksdb_no_link -ldflags="-s -w $LDFLAGS" -o blockbook.exe blockbook.go
          go build -v -tags grocksdb_no_link -o blockbookgen.exe build/templates/generate.go

          Copy-Item -Path "C:\vcpkg\installed\x64-mingw-dynamic\bin\*" -Destination "."
          Compress-Archive -Path .\*.dll, .\*.exe, .\static, .\configs, .\build -DestinationPath .\blockbook-win.zip

      # Step 8: Upload executable as an artifact (optional for debugging)
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: blockbook-win.zip
          path: ./blockbook/blockbook-win.zip

  build-docker:
    name: Build and push Docker image to Github

    permissions:
      contents: read  # Allows access to repository files
      packages: write # Required to push the Docker image to ghcr.io
      
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Log in to GitHub Container Registry (ghcr.io using GitHub token)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Determine Docker image tag based on git commit or git tag
      - name: Determine Docker Image Tag
        id: tags
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${IMAGE}:${{ github.ref_name }},${IMAGE}:latest"
            CPU_TAG="${IMAGE}:cpuchain-${{ github.ref_name }},${IMAGE}:cpuchain-latest"
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "CPU_TAG=$CPU_TAG" >> $GITHUB_ENV
          else
            TAG="${IMAGE}:${{ github.sha }}"
            CPU_TAG="${IMAGE}:cpuchain-${{ github.sha }}"
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "CPU_TAG=$CPU_TAG" >> $GITHUB_ENV
          fi

      # Step 4: Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .                     # Specify the build context (current directory with the Dockerfile)
          push: true                     # Push to container registry
          tags: ${{ env.TAG }} # Image and tag
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

      # Step 6: Build and Push Docker Image
      - name: Build and Push Docker Image (CPUchain)
        uses: docker/build-push-action@v6
        with:
          context: .                     # Specify the build context (current directory with the Dockerfile)
          file: cpuchain.Dockerfile
          push: true                     # Push to container registry
          tags: ${{ env.CPU_TAG }} # Image and tag
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

  upload:
    needs:
      - build-ubuntu
      - build-windows

    if: startsWith(github.ref, 'refs/tags/')

    name: Upload Artifacts to Github Release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Download Ubuntu Artifacts
        uses: actions/download-artifact@v4
        with:
          name: blockbook-linux.tar.gz
          path: ./release-files

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: blockbook-win.zip
          path: ./release-files

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: ./release-files/** # This attaches all files in the directory to the release
